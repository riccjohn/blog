name: CI

on:
    push:
        branches:
            - main

    workflow_dispatch:

jobs:
    build:
        name: Build andCheck
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version-file: .tool-versions
                  cache: ${{ steps.detect-package-manager.outputs.manager }}
                  cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
              working-directory: ${{ env.BUILD_PATH }}
            - name: Build with Astro
              run: |
                  ${{ steps.detect-package-manager.outputs.runner }} astro build \
                    --site "${{ steps.pages.outputs.origin }}" \
                    --base "${{ steps.pages.outputs.base_path }}"
              working-directory: ${{ env.BUILD_PATH }}
            - name: Check Astro
              run: |
                  ${{ steps.detect-package-manager.outputs.runner }} astro check
              working-directory: ${{ env.BUILD_PATH }}
            - name: Check formatting
              run: |
                  ${{ steps.detect-package-manager.outputs.runner }} prettier . --check
              working-directory: ${{ env.BUILD_PATH }}
